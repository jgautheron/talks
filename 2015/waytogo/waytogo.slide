The way to Go
Gophers Katowice #1, September 28, 2015

Jonathan Gautheron
Gopher at Nexway Lab
@jgautheron
jgautheron@neverblend.in

* About me

Past and current works:

- microservices
- cli tools
- gocha
- unexport
- go-boilerplates
- gometalinter-ui

.image http://golang.org/doc/gopher/gopherbw.png 200 _

* 

.image noidea.jpg 550 _
.caption A manual always comes in handy

* Frameworks

* 

.image youtellinme.jpg 550 _

* Frameworks:

- lock,
- constrain,
- add overhead,
- complexify,
- and most of the time, are not needed.

Only adopt heavy-duty frameworks when it becomes necessary.
Instead, you will find that a lot is already built-in the stdlib.

Examples:

- `net/http` - provides HTTP client and server implementations
- `flag` - implements command-line flag parsing

* Libraries

Use libraries instead of pulling a ton of other things that you don't need.
They focus on solving a specific problem, you can switch them easily.

Example of libraries used for a classic web app:

- `httprouter` - A high performance HTTP request router that scales well
- `Negroni` - Idiomatic HTTP Middleware
- `Render` - Easy rendering for JSON, XML, and HTML

* Configuration

* config.xml

.code config.xml

* 

.image nein.jpg 550 _

* Keep it stateless

Aim for no config file *at*all*.

Differences between environments?
Use environment variables (12-factor-ish).

    DB_HOST=db.local CACHE_HOST=cache.local myapp

Specific settings for a customer?
Stamp those into the build.

    go build -ldflags '\
        -X "main.bgColor=f4f4f4" \
        -X "main.logo=http://foo.com/logo.png" \
        ' -o myapp-customer

* Testing

* Packages

Most tests will be located in a `mypackage_test.go`, using the package:

    // mypackage_test.go
    package mypackage_test

This is because you want your test to behave as if they were a client of the package you're using.

For testing private members, follow the convention:

    // mypackage_internal_test.go
    package mypackage

* Benchmarks

.code benchmark.go

* Table-driven tests

.code tabletests.go

`Bench*` functions won't be executed with a regular `go`test`.

Run the benchmark methods with the following:

    go test -bench -v .

* Documentation

* Godoc... or not?!

    /**
     * Begin the scope of a prefix-URI Namespace mapping.
     *
     * @param prefix
     *            the Namespace prefix being declared. An empty string is used
     *            for the default element namespace, which has no prefix.
     * @param uri
     *            the Namespace URI the prefix is mapped to
     */
    StartPrefixMapping(prefix, uri string)

.image ohnoes.jpg 300 _

* Natural language

    // Package message wraps the commit message style logic.
    //
    // For now only the AngularJS convention is implemented.
    // Read more about it here:
    // https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit
    package message

    const (
        // NA is the default when the type cannot be resolved.
        NA messageType = iota
        // Chore regroups maintenance-related tasks.
        Chore
        // Test regroups testing-related tasks.
        Test
    )

    // GetMessageGroup analyses the given commits, and returns a list of
    // properly deconstructed messages for the current convention.
    func GetMessageGroup(cmts []repository.Commit) (map[string]map[string][]Message, error) {
        // ...
    }

.link https://godoc.org/github.com/fluhus/godoc-tricks godoc-tricks

* 

.image codecomments.jpg 550 _
.caption Get creative!

* Linters

* 

.image brainpower.png 600 _

* 

- *go*vet* - Reports potential errors that otherwise compile.
- *go*vet*--shadow* - Reports variables that may have been unintentionally shadowed.
- *gotype* - Syntactic and semantic analysis similar to the Go compiler.
- *deadcode* - Finds unused code.
- *gocyclo* - Computes the cyclomatic complexity of functions.
- *golint* - Google's (mostly stylistic) linter.
- *defercheck* - Checks for duplicate defer calls.
- *varcheck* - Find unused global variables and constants.
- *structcheck* - Find unused struct fields.
- *errcheck* - Check that error return values are used.
- *dupl* - Reports potentially duplicated code.
- *ineffassign* - Detect when assignments to existing variables are not used.

* gometalinter

It concurrently runs the aforementioned linters and normalises their output to a standard format.

    $ go get github.com/alecthomas/gometalinter
    $ gometalinter --install --update

Output sample:

    stutter.go:8:1:warning: unusedGlobal is unused (deadcode)
    stutter.go:20:1:warning: duplicateDefer is unused (deadcode)
    stutter.go:25:1:warning: stuff is unused (deadcode)
    stutter.go:33:1:warning: do is unused (deadcode)
    stutter.go:42:1:warning: testVetShadow is unused (deadcode)
    stutter.go:45:3:error: foo declared but not used (gotype)
    stutter.go:36:3:warning: Shadowing variable `a` (go-nyet)
    stutter.go:45:3:warning: Shadowing variable `foo` (go-nyet)
    stutter.go:12:6:warning: exported type MyStruct should have comment or be unexported (golint)
    stutter.go:16:6:warning: exported type PublicUndocumented should have comment or be unexported (golint)
    ./stutter.go:30::error: unreachable code (vet)
    ./stutter.go:27::error: missing argument for Printf("%d"): format reads arg 1, have only 0 args (vet)

* Makefile

* Facade

Use it if you can.
Exposes a well-known facade in front of common build actions.

Recommended targets:

    make build
    make buildall
    make check
    make image
    make test

Not cross-platform (Windows, looking at you!).

* make check

    # Run several automated source checks to get rid of the most simple issues.
    # This helps keeping code review focused on application logic.
    .PHONY: check
    check:
      @echo "gometalinter"
      @ gometalinter ./...

* Asset Embedding

* 

Embed your application assets *inside* the binary.

Possible usages:

- HTTP assets (images, CSS, JS)
- Templates
- Configuration
- Dataset

.link https://github.com/jteeuwen/go-bindata jteeuwen/go-bindata

* 

*Pros*

- Limits liabilities
- Eases deployment
- Possible to browse files through HTTP

*Cons*

- Loaded in memory
- Increases the binary weight
- Raises slightly the complexity

* Checklist

* 

Like the 10 commandments excepted there are 30.

.link https://github.com/matttproud/gochecklist matttproud/gochecklist

.image hebrewsit.jpg 470 _

* 

The project gathers various conventions and practices around publishing Go projects in one place, splitted in 3 categories: *Minimum*Criteria*, *Good*Citizen* and *Extra*Credit*.

*Minimum*Criteria*

- Does the project build?
- Does the code pass format, lint and error checking tools?
- Does the project's documentation instruct how to build the project?
- Does each `package`<pkg>` statement's package name match the containing directory name?
- Does the project's godoc work correctly?

* 

*Good*Citizen*

- Is a process documented for how and where to report problems?
- Does the project vendor its dependencies in some fashion? Bonus points for low-tech. solutions to this.
- Does the project avoid unnecessarily using external packages when the first-party suffice?

*Extra*Credit*

- Does the project's document actively reference existing solutions or implementation and offer to compare itself with them?
- Does the project offer a formal roadmap?
- In addition to standard tests, does the project have blackbox tests?

* Conclusion

- Prefer libraries to frameworks
- Minimize and split configuration per type
- Test everything
- Natural language powered documentation
- Lint aggressively
- Use a facade for build actions
- Embed assets if relevant
- About to release a project? 30 boxes to check

.image 16.png 180 _